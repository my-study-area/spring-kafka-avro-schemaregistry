/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.estudo.springkafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Mensagem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6813485023037505314L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Mensagem\",\"namespace\":\"br.com.estudo.springkafka\",\"fields\":[{\"name\":\"remetente\",\"type\":\"string\",\"doc\":\"Remetente da mensagem\"},{\"name\":\"destinatario\",\"type\":\"string\",\"doc\":\"Destinatário da mensagem\"},{\"name\":\"corpo\",\"type\":\"string\",\"doc\":\"Corpo com a mensagem a ser enviada\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Mensagem> ENCODER =
      new BinaryMessageEncoder<Mensagem>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Mensagem> DECODER =
      new BinaryMessageDecoder<Mensagem>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Mensagem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Mensagem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Mensagem>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Mensagem to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Mensagem from a ByteBuffer. */
  public static Mensagem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Remetente da mensagem */
  @Deprecated public java.lang.CharSequence remetente;
  /** Destinatário da mensagem */
  @Deprecated public java.lang.CharSequence destinatario;
  /** Corpo com a mensagem a ser enviada */
  @Deprecated public java.lang.CharSequence corpo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Mensagem() {}

  /**
   * All-args constructor.
   * @param remetente Remetente da mensagem
   * @param destinatario Destinatário da mensagem
   * @param corpo Corpo com a mensagem a ser enviada
   */
  public Mensagem(java.lang.CharSequence remetente, java.lang.CharSequence destinatario, java.lang.CharSequence corpo) {
    this.remetente = remetente;
    this.destinatario = destinatario;
    this.corpo = corpo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return remetente;
    case 1: return destinatario;
    case 2: return corpo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: remetente = (java.lang.CharSequence)value$; break;
    case 1: destinatario = (java.lang.CharSequence)value$; break;
    case 2: corpo = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'remetente' field.
   * @return Remetente da mensagem
   */
  public java.lang.CharSequence getRemetente() {
    return remetente;
  }

  /**
   * Sets the value of the 'remetente' field.
   * Remetente da mensagem
   * @param value the value to set.
   */
  public void setRemetente(java.lang.CharSequence value) {
    this.remetente = value;
  }

  /**
   * Gets the value of the 'destinatario' field.
   * @return Destinatário da mensagem
   */
  public java.lang.CharSequence getDestinatario() {
    return destinatario;
  }

  /**
   * Sets the value of the 'destinatario' field.
   * Destinatário da mensagem
   * @param value the value to set.
   */
  public void setDestinatario(java.lang.CharSequence value) {
    this.destinatario = value;
  }

  /**
   * Gets the value of the 'corpo' field.
   * @return Corpo com a mensagem a ser enviada
   */
  public java.lang.CharSequence getCorpo() {
    return corpo;
  }

  /**
   * Sets the value of the 'corpo' field.
   * Corpo com a mensagem a ser enviada
   * @param value the value to set.
   */
  public void setCorpo(java.lang.CharSequence value) {
    this.corpo = value;
  }

  /**
   * Creates a new Mensagem RecordBuilder.
   * @return A new Mensagem RecordBuilder
   */
  public static br.com.estudo.springkafka.Mensagem.Builder newBuilder() {
    return new br.com.estudo.springkafka.Mensagem.Builder();
  }

  /**
   * Creates a new Mensagem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Mensagem RecordBuilder
   */
  public static br.com.estudo.springkafka.Mensagem.Builder newBuilder(br.com.estudo.springkafka.Mensagem.Builder other) {
    return new br.com.estudo.springkafka.Mensagem.Builder(other);
  }

  /**
   * Creates a new Mensagem RecordBuilder by copying an existing Mensagem instance.
   * @param other The existing instance to copy.
   * @return A new Mensagem RecordBuilder
   */
  public static br.com.estudo.springkafka.Mensagem.Builder newBuilder(br.com.estudo.springkafka.Mensagem other) {
    return new br.com.estudo.springkafka.Mensagem.Builder(other);
  }

  /**
   * RecordBuilder for Mensagem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Mensagem>
    implements org.apache.avro.data.RecordBuilder<Mensagem> {

    /** Remetente da mensagem */
    private java.lang.CharSequence remetente;
    /** Destinatário da mensagem */
    private java.lang.CharSequence destinatario;
    /** Corpo com a mensagem a ser enviada */
    private java.lang.CharSequence corpo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.estudo.springkafka.Mensagem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.remetente)) {
        this.remetente = data().deepCopy(fields()[0].schema(), other.remetente);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destinatario)) {
        this.destinatario = data().deepCopy(fields()[1].schema(), other.destinatario);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.corpo)) {
        this.corpo = data().deepCopy(fields()[2].schema(), other.corpo);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Mensagem instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.estudo.springkafka.Mensagem other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.remetente)) {
        this.remetente = data().deepCopy(fields()[0].schema(), other.remetente);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.destinatario)) {
        this.destinatario = data().deepCopy(fields()[1].schema(), other.destinatario);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.corpo)) {
        this.corpo = data().deepCopy(fields()[2].schema(), other.corpo);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'remetente' field.
      * Remetente da mensagem
      * @return The value.
      */
    public java.lang.CharSequence getRemetente() {
      return remetente;
    }

    /**
      * Sets the value of the 'remetente' field.
      * Remetente da mensagem
      * @param value The value of 'remetente'.
      * @return This builder.
      */
    public br.com.estudo.springkafka.Mensagem.Builder setRemetente(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.remetente = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'remetente' field has been set.
      * Remetente da mensagem
      * @return True if the 'remetente' field has been set, false otherwise.
      */
    public boolean hasRemetente() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'remetente' field.
      * Remetente da mensagem
      * @return This builder.
      */
    public br.com.estudo.springkafka.Mensagem.Builder clearRemetente() {
      remetente = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinatario' field.
      * Destinatário da mensagem
      * @return The value.
      */
    public java.lang.CharSequence getDestinatario() {
      return destinatario;
    }

    /**
      * Sets the value of the 'destinatario' field.
      * Destinatário da mensagem
      * @param value The value of 'destinatario'.
      * @return This builder.
      */
    public br.com.estudo.springkafka.Mensagem.Builder setDestinatario(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.destinatario = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'destinatario' field has been set.
      * Destinatário da mensagem
      * @return True if the 'destinatario' field has been set, false otherwise.
      */
    public boolean hasDestinatario() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'destinatario' field.
      * Destinatário da mensagem
      * @return This builder.
      */
    public br.com.estudo.springkafka.Mensagem.Builder clearDestinatario() {
      destinatario = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'corpo' field.
      * Corpo com a mensagem a ser enviada
      * @return The value.
      */
    public java.lang.CharSequence getCorpo() {
      return corpo;
    }

    /**
      * Sets the value of the 'corpo' field.
      * Corpo com a mensagem a ser enviada
      * @param value The value of 'corpo'.
      * @return This builder.
      */
    public br.com.estudo.springkafka.Mensagem.Builder setCorpo(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.corpo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'corpo' field has been set.
      * Corpo com a mensagem a ser enviada
      * @return True if the 'corpo' field has been set, false otherwise.
      */
    public boolean hasCorpo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'corpo' field.
      * Corpo com a mensagem a ser enviada
      * @return This builder.
      */
    public br.com.estudo.springkafka.Mensagem.Builder clearCorpo() {
      corpo = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Mensagem build() {
      try {
        Mensagem record = new Mensagem();
        record.remetente = fieldSetFlags()[0] ? this.remetente : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.destinatario = fieldSetFlags()[1] ? this.destinatario : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.corpo = fieldSetFlags()[2] ? this.corpo : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Mensagem>
    WRITER$ = (org.apache.avro.io.DatumWriter<Mensagem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Mensagem>
    READER$ = (org.apache.avro.io.DatumReader<Mensagem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
